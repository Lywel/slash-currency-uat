{"version":3,"sources":["components/Navigation.js","components/LiveLogs.js","components/NetworkTopo.js","components/MainPage.js","components/Dashboard.js","components/App.js","serviceWorker.js","index.js"],"names":["Navigation","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","url","handleChange","bind","assertThisInitialized","evt","setState","objectSpread","target","value","_this$props","status","onChange","status_color","connected","connecting","disconnected","react_default","a","createElement","className","reactstrap_es","dark","expand","addonType","color","onClick","disabled","Component","LiveLogs","logs","reverse","map","log","id","key","type","index_esm","icon","ChevronLeft","ChevronRight","dataType","toggler","data","entries","_ref","_ref2","slicedToArray","val","c","toString","join","JSON","stringify","NetworkTopo","options","layout","improvedLayout","edges","shadow","smooth","nodes","shape","size","font","autoResize","events","select","event","console","graph","lib_default","style","height","width","MainPage","failed","connect","connectionStatusChanged","updateNetworkTopo","prevProps","tries","onStateChange","_this2","ws","WebSocket","onmessage","e","msg","parse","address","networkAddress","node","label","split","fixed","filter","to","from","prevState","toConsumableArray","concat","onopen","onerror","close","onclose","send","_this$state","fluid","md","src_components_LiveLogs","components_NetworkTopo","Dashboard","node_url","conn_status","handleStateChange","src_components_Navigation","src_components_MainPage","App","src_components_Dashboard","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.07f1381c.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport {\n  Navbar,\n  NavbarBrand,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n  Badge,\n  Button,\n} from 'reactstrap'\nimport './Navigation.css'\n\nclass Navigation extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      url: this.props.url\n    }\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  handleChange(evt) {\n    this.setState({...this.state, url: evt.target.value})\n  }\n\n  render() {\n    const { status, onChange } = this.props\n    const { url } = this.state\n    let status_color = {\n      connected: 'success',\n      connecting: 'warning',\n      disconnected: 'danger',\n    }[status]\n\n    return (\n      <div className={\"Navigation \" + status} >\n        <h1>Validator UAT</h1>\n        <Navbar dark expand=\"md\">\n          <NavbarBrand>Validator</NavbarBrand>\n          <InputGroup>\n            <InputGroupAddon addonType=\"prepend\">\n              <Badge color={ status_color }>{' '}</Badge>\n            </InputGroupAddon>\n            <Input value={ url } onChange={ this.handleChange } />\n            <InputGroupAddon addonType=\"append\">\n              <Button\n                onClick={() => onChange(url)}\n                disabled={status === 'connected' && this.props.url === this.state.url}>\n                { status === 'connected' ? this.props.url !== this.state.url ? 'Change' : 'Connected' : 'Connect' }\n              </Button>\n            </InputGroupAddon>\n          </InputGroup>\n        </Navbar>\n      </div>\n    )\n  }\n}\n\nexport default Navigation\n","import React, { Component } from 'react'\nimport {\n  Card,\n  CardHeader,\n  CardText,\n  CardBody,\n  UncontrolledCollapse,\n} from 'reactstrap'\nimport Octicon, {ChevronLeft, ChevronRight} from '@githubprimer/octicons-react'\n\nimport './LiveLogs.css'\n\nclass LiveLogs extends Component {\n  render() {\n    const logs = this.props.logs\n      .reverse()\n      .map((log, id) => (\n        <div key={ id } >\n          <Card className=\"text-white bg-dark\">\n            <CardHeader id={ 'log-toggler-' + id }>\n              {\n                log.type === \"ibftEventIn\"\n                  ? <Octicon icon={ChevronLeft} />\n                  : <Octicon icon={ChevronRight} />\n              }\n              { log.dataType || log.type }\n            </CardHeader>\n            <UncontrolledCollapse toggler={ '#log-toggler-' + id }>\n              <CardBody>\n                  { typeof(log.data) === 'string'\n                      ? log.data\n                      : Object.entries(log.data)\n                        .map(([key, val], id) => {\n                          switch (key) {\n                          case 'Address':\n                          case 'Dest':\n                            val = val.map(c => c.toString(16)).join('')\n                            break;\n                          default:\n                            val = JSON.stringify(val)\n                          }\n                          return (\n                            <p key={ id }>\n                              <strong>{ key }: </strong>\n                              <span>\n                              { val }\n                              </span>\n                            </p>\n                          )\n                        })\n                  }\n              </CardBody>\n            </UncontrolledCollapse>\n          </Card>\n        </div>\n      ))\n    return (\n      <div className=\"LiveLogs h-100\">\n        <h3>Live logs</h3>\n        <div>\n        { logs }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default LiveLogs\n\n","import React, { Component } from 'react'\nimport {\n} from 'reactstrap'\nimport Graph from 'react-graph-vis'\n\nclass NetworkTopo extends Component {\n\n  options = {\n    layout: {\n      improvedLayout: true\n    },\n    edges: {\n      shadow: true,\n      smooth: true,\n    },\n    nodes: {\n      shape: 'hexagon',\n      shadow: true,\n      size: 40,\n      font: {\n        color: 'white',\n      },\n    },\n    autoResize: true,\n  }\n\n  events = {\n    select: event => {\n      var { nodes, edges } = event;\n      console.log(\"Selected nodes:\");\n      console.log(nodes);\n      console.log(\"Selected edges:\");\n      console.log(edges);\n    }\n  }\n\n  render() {\n    const { graph } = this.props\n\n    return (\n      <div className=\"NetworkTopo h-100\">\n        <Graph graph={graph} options={this.options} events={this.events} style={{ height: '100%', width: '100%'}}/>\n      </div>\n    )\n  }\n}\n\nexport default NetworkTopo\n","import React, { Component } from 'react'\nimport {\n  Row,\n  Col,\n  Container,\n} from 'reactstrap'\nimport LiveLogs from './LiveLogs'\nimport NetworkTopo from './NetworkTopo'\n\nimport './MainPage.css'\n\nclass MainPage extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      logs: [],\n      status: 'disconnected',\n      failed: false,\n      nodes: [],\n      edges: [],\n    }\n\n    this.connect = this.connect.bind(this)\n    this.connectionStatusChanged = this.connectionStatusChanged.bind(this)\n    this.updateNetworkTopo = this.updateNetworkTopo.bind(this)\n  }\n\n  componentDidMount() {\n    this.connect(this.props.url)\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.url !== prevProps.url) {\n      this.setState({...this.state,\n        tries: 0\n      })\n    }\n    if (this.props.url !== prevProps.url\n      || (this.state.status === 'disconnected' && this.state.tries < 3))\n      this.connect(this.props.url)\n  }\n\n  connectionStatusChanged(status) {\n    this.setState({...this.state,\n      status: status\n    })\n    this.props.onStateChange(status)\n  }\n\n  connect(url) {\n    this.setState({...this.state,\n      tries: this.tries + 1\n    })\n    this.connectionStatusChanged('connecting')\n    const ws = new WebSocket('ws://' + url)\n\n    ws.onmessage = e => {\n      console.log('onmessage:', e.data)\n      const msg = JSON.parse(e.data)\n      switch (msg.type) {\n      case 'network-state':\n        const nodes = Object.entries(msg.data)\n          .map(([address, networkAddress], id) => {\n          const label = networkAddress.split(':')[0] || 'THIS'\n          let node = {\n            id: id,\n            label: label,\n            address: address,\n            networkAddress: networkAddress,\n          }\n          if (networkAddress === ':8080') {\n            node.color = 'green'\n            node.fixed = true\n          }\n          return node\n        })\n        console.log(nodes)\n        const edges = nodes\n          .filter(node => node.id !== 1)\n          .map(node => ({ to: 1, from: node.id }))\n\n        this.setState({...this.state,\n          edges: edges,\n          nodes: nodes,\n        })\n        break\n      default:\n        this.setState(prevState => ({\n          logs: [...prevState.logs, msg]\n        }))\n      }\n    }\n\n    ws.onopen = e => {\n      this.connectionStatusChanged('connected')\n      this.setState({...this.state,\n        logs: [],\n        failed: false,\n      })\n      this.updateNetworkTopo()\n    }\n\n    ws.onerror = e => {\n      this.connectionStatusChanged('disconnected')\n      this.ws.close()\n      this.setState({...this.state,\n        logs: [],\n        failed: true,\n      })\n    }\n    ws.onclose = e => {\n      this.connectionStatusChanged('disconnected')\n      this.ws.close()\n      this.setState({...this.state,\n        logs: [],\n        failed: true,\n      })\n    }\n    this.ws = ws\n  }\n\n  updateNetworkTopo() {\n    this.ws.send(JSON.stringify({\n      type: 'network-state'\n    }))\n  }\n\n  render() {\n    const { logs, status, nodes, edges } = this.state\n    return (\n      <Container fluid className={\"MainPage \" + status}>\n        <Row className=\"h-100\">\n          <Col md='3' className=\"h-100\">\n            <LiveLogs logs={ logs }/>\n          </Col>\n          <Col md='9' className=\"h-100\">\n            <NetworkTopo graph={{ nodes,  edges }} />\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n}\n\nexport default MainPage\n","import React, { Component } from 'react'\nimport Navigation from './Navigation'\nimport MainPage from './MainPage'\nimport './Dashboard.css'\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      node_url: 'a263d53aae7c911e8a7a9069f40f5f2f-415446416.ap-southeast-1.elb.amazonaws.com:3000/ws',\n      //node_url: '127.0.0.1:3001/ws',\n      conn_status: 'disconnected',\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleStateChange = this.handleStateChange.bind(this)\n  }\n\n  handleChange(url) {\n    this.setState({\n      node_url: url\n    })\n  }\n\n  handleStateChange(state) {\n    this.setState({ ...this.state,\n      conn_status: state\n    })\n  }\n\n  render() {\n    const { node_url, conn_status } = this.state\n\n    return (\n      <div className=\"Dashboard\">\n        <Navigation url={ node_url } status={ conn_status } onChange={ this.handleChange } />\n        <MainPage url={ node_url } onStateChange={ this.handleStateChange } />\n      </div>\n    )\n  }\n}\n\nexport default Dashboard\n\n","import React, { Component } from 'react'\nimport './App.css'\nimport Dashboard from './Dashboard'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Dashboard />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}