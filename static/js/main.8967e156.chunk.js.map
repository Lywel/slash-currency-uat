{"version":3,"sources":["components/LogDetailsModal.js","components/TransactionsCard.js","components/Navigation.js","components/LiveLogs.js","components/NetworkTopo.js","components/NetworkDetails.js","components/BlockchainCard.js","components/History.js","components/MainPage.js","components/Dashboard.js","components/App.js","serviceWorker.js","index.js"],"names":["LogDetailsModal","_this$props","this","props","isOpen","toggle","details","body","dataType","_details$data$Proposa","data","Proposal","block","transactions","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","Fragment","reactstrap__WEBPACK_IMPORTED_MODULE_8__","striped","size","Object","entries","map","_ref","id","_ref2","_mnt_sd_home_maxime_workspace_pro_slash_lab_currency_uat_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__","key","val","tx","Buffer","from","toString","substring","to","amount","console","log","_ref3","_ref4","JSON","stringify","formatLogDetails","type","_githubprimer_octicons_react__WEBPACK_IMPORTED_MODULE_6__","icon","ChevronLeft","ChevronRight","Component","TransactionsCard","chain","react__WEBPACK_IMPORTED_MODULE_6___default","reactstrap__WEBPACK_IMPORTED_MODULE_7__","className","color","reduce","txs","acc","_mnt_sd_home_maxime_workspace_pro_slash_lab_currency_uat_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","concat","reverse","Navigation","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","url","handleChange","bind","assertThisInitialized","handleKeyPress","evt","setState","objectSpread","target","value","status","onChange","status_color","connected","connecting","disconnected","react_default","reactstrap_es","dark","expand","addonType","onKeyPress","onClick","disabled","stylizeItem","Clippy","Alert","LiveLogs","detailsModalOpen","openDetailsModal","closeDetailsModal","_this2","_this3","logs","index_esm","_this$state","NetworkTopo","options","layout","improvedLayout","edges","shadow","smooth","nodes","shape","font","autoResize","events","select","event","onNodeSelect","graph","lib_default","style","height","width","NetworkDetails","node","slicedToArray","BlockchainCard","item","number","parenthash","History","activeTab","tab","justified","pills","tabId","src_components_BlockchainCard","MainPage","failed","ws","tries","selectedNetworkNode","updateTopoInter","updateBlockchainInter","connect","connectionStatusChanged","updateNetworkTopo","updateBlockchain","setInterval","prevProps","onStateChange","onopen","onclose","close","WebSocket","onmessage","e","msg","parse","address","networkAddress","label","split","fixed","filter","date","Date","now","toConsumableArray","sort","b","slice","onerror","send","_this4","fetch","then","res","json","blockchain","nodeId","fluid","md","src_components_LiveLogs","components_NetworkTopo","components_NetworkDetails","src_components_History","Dashboard","node_url","conn_status","handleStateChange","src_components_Navigation","src_components_MainPage","App","src_components_Dashboard","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8967e156.chunk.js","sourcesContent":["import Octicon, {ChevronLeft, ChevronRight} from '@githubprimer/octicons-react'\nimport React, { Component } from 'react'\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Table,\n} from 'reactstrap'\n\nimport './LogDetailsModal.css'\n\nfunction formatLogDetails(details) {\n  switch (details.dataType) {\n  case 'core.RequestEvent':\n    // Display block details\n    const { block, transactions } = details.data.Proposal\n    return (<>\n      <h3>Proposal: block</h3>\n      <Table striped size=\"sm\">\n        <tbody>\n        {\n          Object.entries(block).map(([key, val], id) => (\n            <tr key={id}>\n              <th>{ key }</th>\n              <td>{ val }</td>\n            </tr>\n          ))\n        }\n        </tbody>\n      </Table>\n      <h4>Transactions</h4>\n      <Table striped size=\"sm\">\n        <thead>\n          <tr>\n            <th>From</th>\n            <th>To</th>\n            <th>Amount</th>\n          </tr>\n        </thead>\n        <tbody>\n        {\n          transactions.map((tx, id) => (\n            <tr key={id}>\n              <td>{ Buffer.from(tx.from).toString('hex').substring(0, 16) }</td>\n              <td>{ Buffer.from(tx.to).toString('hex').substring(0, 16) }</td>\n              <td>{ tx.amount }</td>\n            </tr>\n          ))\n        }\n        </tbody>\n      </Table>\n    </>)\n  case 'types.Transaction':\n  console.log(details)\n    // Display transaction details\n    return (<>\n      <h3>Transaction</h3>\n      <Table striped size=\"sm\">\n        <tbody>\n        {\n          Object.entries(details.data).map(([key, val], id) => (\n            <tr key={id}>\n              <th>{ key }</th>\n              <td>{ key === 'from' || key === 'to' ? Buffer.from(val).toString('hex') : val }</td>\n            </tr>\n          ))\n        }\n        </tbody>\n      </Table>\n    </>)\n  default:\n    return (<pre>{ JSON.stringify(details, null, 2) }</pre>)\n  }\n}\n\nclass LogDetailsModal extends Component {\n  render() {\n    const { isOpen, toggle, details } = this.props\n\n    const body = details ? formatLogDetails(details) : null\n\n    return (\n      <div>\n        <Modal isOpen={ isOpen } toggle={ toggle } size='lg'>\n        { details ? (<>\n            <ModalHeader toggle={ toggle }>\n            {\n              details.type === \"ibftEventIn\"\n                ? <Octicon icon={ChevronLeft} />\n                : <Octicon icon={ChevronRight} />\n            }\n            { details.dataType || details.type }\n            </ModalHeader>\n            <ModalBody>\n            { body }\n            </ModalBody>\n          </>\n          ) : ''\n        }\n        </Modal>\n      </div>\n    )\n  }\n}\n\nexport default LogDetailsModal\n","import React, { Component } from 'react'\nimport {\n  Card,\n  Table,\n} from 'reactstrap'\n\nimport './BlockchainCard.css'\n\nclass TransactionsCard extends Component {\n  render() {\n    const { chain } = this.props\n    return (\n      <Card className=\"TransactionsCard\" color=\"dark\">\n        <Table>\n          <thead>\n            <tr>\n              <th>From</th>\n              <th>To</th>\n              <th>Amount</th>\n            </tr>\n          </thead>\n          <tbody>\n          { chain &&\n            chain\n              .map(block => block.transactions)\n              .reduce((txs, acc) => [...txs, ...acc], [])\n              .map((tx, id) => (\n              <tr key={id}>\n                <td>{ Buffer.from(tx.from).toString('hex').substring(0, 20) }</td>\n                <td>{ Buffer.from(tx.to).toString('hex').substring(0, 20) }</td>\n                <td>{ tx.amount }</td>\n              </tr>\n            )).reverse()\n          }\n          </tbody>\n        </Table>\n      </Card>\n    )\n  }\n}\n\nexport default TransactionsCard\n\n","import React, { Component } from 'react'\nimport {\n  Navbar,\n  NavbarBrand,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n  Badge,\n  Button,\n} from 'reactstrap'\nimport './Navigation.css'\n\nclass Navigation extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      url: this.props.url\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleKeyPress = this.handleKeyPress.bind(this)\n  }\n\n  handleChange(evt) {\n    this.setState({...this.state, url: evt.target.value})\n  }\n\n  handleKeyPress(evt) {\n    if (evt.key === 'Enter') {\n      // If button is disabled\n      if (this.props.status === 'connected' && this.props.url === this.state.url)\n        return\n      this.props.onChange(this.state.url)\n    }\n  }\n\n  render() {\n    const { status, onChange } = this.props\n    const { url } = this.state\n    let status_color = {\n      connected: 'success',\n      connecting: 'warning',\n      disconnected: 'danger',\n    }[status]\n\n    return (\n      <div className={\"Navigation \" + status} >\n        <h1>Validator UAT</h1>\n        <Navbar dark expand=\"md\">\n          <NavbarBrand>Validator</NavbarBrand>\n          <InputGroup>\n            <InputGroupAddon addonType=\"prepend\">\n              <Badge color={ status_color }>{' '}</Badge>\n            </InputGroupAddon>\n            <Input value={ url } onChange={ this.handleChange } onKeyPress={ this.handleKeyPress }/>\n            <InputGroupAddon addonType=\"append\">\n              <Button\n                onClick={() => onChange(url)}\n                disabled={status === 'connected' && this.props.url === this.state.url}>\n                { status === 'connected' ? this.props.url !== this.state.url ? 'Change' : 'Connected' : 'Connect' }\n              </Button>\n            </InputGroupAddon>\n          </InputGroup>\n        </Navbar>\n      </div>\n    )\n  }\n}\n\nexport default Navigation\n","import React, { Component } from 'react'\nimport {\n  ListGroup,\n  ListGroupItem,\n  Button,\n} from 'reactstrap'\nimport Octicon, {ChevronLeft, ChevronRight, Clippy, Alert} from '@githubprimer/octicons-react'\nimport LogDetailsModal from './LogDetailsModal'\n\nimport './LiveLogs.css'\n\nfunction stylizeItem(type) {\n  switch (type) {\n  case 'ibftEventIn':\n    return {\n      color: 'primary',\n      icon: ChevronRight,\n    }\n  case 'ibftEventOut':\n    return {\n      color: 'info',\n      icon: ChevronLeft,\n    }\n  case 'txEvent':\n    return {\n      color: 'success',\n      icon: Clippy,\n    }\n  default:\n    return {\n      color: 'dark',\n      icon: Alert,\n    }\n  }\n}\n\nclass LiveLogs extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      detailsModalOpen: false,\n      details: null,\n    }\n\n    this.openDetailsModal = this.openDetailsModal.bind(this)\n    this.closeDetailsModal = this.closeDetailsModal.bind(this)\n  }\n\n  openDetailsModal(details) {\n    return () => {\n      this.setState({\n        detailsModalOpen: true,\n        details: details,\n      })\n    }\n  }\n\n  closeDetailsModal() {\n    this.setState({\n      detailsModalOpen: false,\n    })\n  }\n\n  render() {\n\n    const logs = this.props.logs\n      .map((log, id) => (\n        <ListGroupItem key={ id } color={ stylizeItem(log.type).color }>\n          <Button color=\"link\" onClick={ this.openDetailsModal(log) }>\n            <Octicon icon={ stylizeItem(log.type).icon } />\n            { (() => {\n              switch (log.dataType) {\n                case 'core.RequestEvent':\n                  return 'Proposal: block'\n                default:\n                  return log.dataType || log.type\n                }\n              })()\n            }\n          </Button>\n        </ListGroupItem>\n      ))\n    const { details, detailsModalOpen } = this.state\n    return (\n      <div className=\"LiveLogs h-100\">\n        <LogDetailsModal\n          isOpen={ detailsModalOpen }\n          toggle={ this.closeDetailsModal }\n          details={ details }\n        />\n        <ListGroup>\n        { logs }\n        </ListGroup>\n      </div>\n    )\n  }\n}\n\nexport default LiveLogs\n\n","import React, { Component } from 'react'\nimport {\n} from 'reactstrap'\nimport Graph from 'react-graph-vis'\n\nclass NetworkTopo extends Component {\n\n  options = {\n    layout: {\n      improvedLayout: true\n    },\n    edges: {\n      shadow: true,\n      smooth: true,\n    },\n    nodes: {\n      shape: 'hexagon',\n      shadow: true,\n      size: 20,\n      font: {\n        color: 'white',\n      },\n    },\n    autoResize: true,\n  }\n\n  events = {\n    select: event => {\n      const { nodes/*, edges */ } = event;\n      this.props.onNodeSelect(nodes[0])\n    }\n  }\n\n  render() {\n    const { graph } = this.props\n\n    return (\n      <div className=\"NetworkTopo\">\n        <Graph graph={graph} options={this.options} events={this.events} style={{ height: '100%', width: '100%'}}/>\n      </div>\n    )\n  }\n}\n\nexport default NetworkTopo\n","import React, { Component } from 'react'\nimport {\n  Card,\n  CardTitle,\n} from 'reactstrap'\n\nclass NetworkDetails extends Component {\n  render() {\n    const { node } = this.props\n    return (\n      <div className=\"NetworkDetails\">\n        <Card body color='dark'>\n          <CardTitle>Validator details</CardTitle>\n          <ul>\n          { node ?\n            Object.entries(node).map(([key, val], id) => (\n              <li key={id}>\n                <strong>{ key }: </strong>\n                { val }\n              </li>\n            ))\n            : 'Please select a node'\n          }\n          </ul>\n        </Card>\n      </div>\n    )\n  }\n}\n\nexport default NetworkDetails\n\n","import React, { Component } from 'react'\nimport {\n  Card,\n  ListGroup,\n  ListGroupItem,\n} from 'reactstrap'\n\nimport './BlockchainCard.css'\n\nclass BlockchainCard extends Component {\n  render() {\n    const { chain } = this.props\n    return (\n      <Card className=\"BlockchainCard\" color=\"dark\">\n        <ListGroup>\n        { chain &&\n          chain.map((item, id) => (\n            <ListGroupItem key={ id } color=\"dark\">\n              <strong className=\"mr-3\">{ item.block.number }</strong>\n              <span>{ item.block.parenthash || 'Previous block hash'}</span>\n            </ListGroupItem>\n          )).reverse()\n        }\n        </ListGroup>\n      </Card>\n    )\n  }\n}\n\nexport default BlockchainCard\n","import React, { Component } from 'react'\nimport {\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink,\n} from 'reactstrap'\nimport './History.css'\nimport BlockchainCard from './BlockchainCard'\nimport TransactionsCard from './TransactionsCard'\n\nclass History extends Component {\n  constructor(props) {\n    super(props)\n\n    this.toggle = this.toggle.bind(this)\n    this.state = {\n      activeTab: '1',\n    }\n  }\n\n  toggle(tab) {\n    if (this.state.activeTab !== tab) {\n      this.setState({\n        activeTab: tab\n      })\n    }\n  }\n\n  render() {\n    const { activeTab } = this.state\n    const { chain } = this.props\n    return (\n      <div className=\"History h-100\">\n        <Nav justified pills>\n          <NavItem>\n            <NavLink\n              className={ (activeTab === '1' ? 'active ' : '') }\n              onClick={() => { this.toggle('1'); }}\n            >\n              Blockchain\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink\n              className={ (activeTab === '2' ? 'active ' : '') }\n              onClick={() => { this.toggle('2'); }}\n            >\n              Transactions\n            </NavLink>\n          </NavItem>\n        </Nav>\n        <TabContent activeTab={ activeTab }>\n          <TabPane tabId=\"1\">\n            <BlockchainCard chain={ chain }/>\n          </TabPane>\n          <TabPane tabId=\"2\">\n            <TransactionsCard chain={ chain } />\n          </TabPane>\n        </TabContent>\n      </div>\n    );\n  }\n}\n\n  export default History\n","import React, { Component } from 'react'\nimport {\n  Row,\n  Col,\n  Container,\n} from 'reactstrap'\nimport LiveLogs from './LiveLogs'\nimport NetworkTopo from './NetworkTopo'\nimport NetworkDetails from './NetworkDetails'\nimport History from './History'\n\nimport './MainPage.css'\n\nclass MainPage extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      logs: [],\n      status: 'disconnected',\n      failed: false,\n      nodes: [],\n      edges: [],\n      ws: null,\n      tries: 0,\n      selectedNetworkNode: null,\n      updateTopoInter: null,\n      updateBlockchainInter: null,\n      chain: null,\n    }\n\n    this.connect = this.connect.bind(this)\n    this.connectionStatusChanged = this.connectionStatusChanged.bind(this)\n    this.updateNetworkTopo = this.updateNetworkTopo.bind(this)\n    this.updateBlockchain = this.updateBlockchain.bind(this)\n    this.onNodeSelect = this.onNodeSelect.bind(this)\n  }\n\n  componentDidMount() {\n    this.connect(this.props.url)\n    this.setState({\n      updateTopoInter: setInterval(this.updateNetworkTopo, 1000),\n      updateBlockchainInter: setInterval(this.updateBlockchain, 1000),\n    })\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.url !== prevProps.url) {\n      this.setState({\n        tries: 0\n      }, () => this.connect(this.props.url))\n    } else if (this.state.status === 'disconnected' && this.state.tries < 3) {\n      this.connect(this.props.url)\n    }\n  }\n\n  connectionStatusChanged(status) {\n    this.setState({\n      status: status\n    })\n    this.props.onStateChange(status)\n  }\n\n  connect(url) {\n    this.setState({\n      tries: this.state.tries + 1\n    })\n    if (this.state.ws && this.state.status !== 'disconnected') {\n      const ws = this.state.ws\n      ws.onopen = null\n      ws.onclose = null\n      ws.close()\n    }\n    this.connectionStatusChanged('connecting')\n    const ws = new WebSocket('ws://' + url)\n\n    ws.onmessage = e => {\n      const msg = JSON.parse(e.data)\n      switch (msg.type) {\n      case 'network-state':\n        const nodes = Object.entries(msg.data)\n          .map(([address, networkAddress], id) => {\n          const label = networkAddress.split(':')[0] || 'THIS'\n          let node = {\n            id: id,\n            label: label,\n            address: address,\n            networkAddress: networkAddress,\n          }\n          if (networkAddress === ':8080') {\n            node.color = 'green'\n            node.fixed = true\n          }\n          return node\n        })\n        const edges = nodes\n          .filter(node => node.id !== 1)\n          .map(node => ({ to: 1, from: node.id }))\n\n        this.setState({\n          edges: edges,\n          nodes: nodes,\n        })\n        break\n      default:\n        msg.date = Date.now()\n        const logs = [...this.state.logs, msg].sort((a, b) => (b.date - a.date)).slice(0, 20)\n        this.setState({\n          logs: logs\n        })\n      }\n    }\n\n    ws.onopen = e => {\n      if (ws.url !== 'ws://' + this.props.url) {\n        return ws.close()\n      }\n      this.connectionStatusChanged('connected')\n      this.setState({\n        logs: [],\n        failed: false,\n      })\n      this.updateNetworkTopo()\n    }\n\n    ws.onerror = e => {\n      if (ws.url !== 'ws://' + this.props.url)\n        return ws.close()\n      this.connectionStatusChanged('disconnected')\n      this.state.ws.close()\n    }\n    ws.onclose = e => {\n      if (ws.url !== 'ws://' + this.props.url)\n        return\n      this.connectionStatusChanged('disconnected')\n    }\n    this.setState({ws})\n  }\n\n  updateNetworkTopo() {\n    if (this.state.status === 'connected' && this.state.ws.url === 'ws://' + this.props.url) {\n      this.state.ws.send(JSON.stringify({\n        type: 'network-state'\n      }))\n    }\n  }\n\n  updateBlockchain() {\n    fetch('http://' + this.props.url.split('/')[0] + '/state')\n      .then(res => res.json())\n      .then(json => {\n        this.setState({\n          chain: json.blockchain,\n        })\n      })\n  }\n\n  onNodeSelect(nodeId) {\n    this.setState({\n      selectedNetworkNode: this.state.nodes[nodeId]\n    })\n  }\n\n  render() {\n    const { logs, status, nodes, edges, selectedNetworkNode, chain } = this.state\n    return (\n      <Container fluid className={\"MainPage \" + status}>\n        <Row className=\"h-100\">\n          <Col md='2' className=\"h-100\">\n            <LiveLogs logs={ logs }/>\n            <h2>Live logs</h2>\n          </Col>\n          <Col md='6' className=\"h-100\">\n            <NetworkTopo graph={{ nodes,  edges }} onNodeSelect={ this.onNodeSelect } />\n            <NetworkDetails node={ selectedNetworkNode } />\n            <h2>Network topology</h2>\n          </Col>\n          <Col md='4' className=\"h-100\">\n            <History chain={ chain }/>\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n}\n\nexport default MainPage\n","import React, { Component } from 'react'\nimport Navigation from './Navigation'\nimport MainPage from './MainPage'\nimport './Dashboard.css'\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      node_url: 'a263d53aae7c911e8a7a9069f40f5f2f-415446416.ap-southeast-1.elb.amazonaws.com:3000/ws',\n      //node_url: '127.0.0.1:3001/ws',\n      conn_status: 'disconnected',\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleStateChange = this.handleStateChange.bind(this)\n  }\n\n  handleChange(url) {\n    this.setState({\n      node_url: url\n    })\n  }\n\n  handleStateChange(state) {\n    this.setState({ ...this.state,\n      conn_status: state\n    })\n  }\n\n  render() {\n    const { node_url, conn_status } = this.state\n\n    return (\n      <div className=\"Dashboard\">\n        <Navigation url={ node_url } status={ conn_status } onChange={ this.handleChange } />\n        <MainPage url={ node_url } onStateChange={ this.handleStateChange } />\n      </div>\n    )\n  }\n}\n\nexport default Dashboard\n\n","import React, { Component } from 'react'\nimport './App.css'\nimport Dashboard from './Dashboard'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Dashboard />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}