{"version":3,"sources":["components/Navigation.js","components/LogDetailsModal.js","components/LiveLogs.js","components/NetworkTopo.js","components/NetworkDetails.js","components/MainPage.js","components/Dashboard.js","components/App.js","serviceWorker.js","index.js"],"names":["Navigation","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","url","handleChange","bind","assertThisInitialized","handleKeyPress","evt","setState","objectSpread","target","value","key","status","onChange","_this$props","status_color","connected","connecting","disconnected","react_default","a","createElement","className","reactstrap_es","dark","expand","addonType","color","onKeyPress","onClick","disabled","Component","LogDetailsModal","isOpen","toggle","details","body","dataType","console","log","_details$data$Proposa","data","Proposal","block","transactions","Fragment","striped","size","entries","map","_ref","id","_ref2","slicedToArray","val","tx","from","substr","to","amount","JSON","stringify","formatLogDetails","type","index_esm","icon","ChevronLeft","ChevronRight","stylizeItem","Clippy","Alert","LiveLogs","detailsModalOpen","openDetailsModal","closeDetailsModal","_this2","_this3","logs","_this$state","src_components_LogDetailsModal","NetworkTopo","options","layout","improvedLayout","edges","shadow","smooth","nodes","shape","font","autoResize","events","select","event","onNodeSelect","graph","lib_default","style","height","width","NetworkDetails","node","label","MainPage","failed","ws","tries","selectedNetworkNode","connect","connectionStatusChanged","updateNetworkTopo","prevProps","onStateChange","onclose","close","WebSocket","onmessage","e","msg","parse","address","networkAddress","split","fixed","filter","date","Date","now","toConsumableArray","concat","sort","b","slice","onopen","onerror","send","nodeId","fluid","md","src_components_LiveLogs","components_NetworkTopo","components_NetworkDetails","Dashboard","node_url","conn_status","handleStateChange","src_components_Navigation","src_components_MainPage","App","src_components_Dashboard","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.40ab059a.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport {\n  Navbar,\n  NavbarBrand,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n  Badge,\n  Button,\n} from 'reactstrap'\nimport './Navigation.css'\n\nclass Navigation extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      url: this.props.url\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleKeyPress = this.handleKeyPress.bind(this)\n  }\n\n  handleChange(evt) {\n    this.setState({...this.state, url: evt.target.value})\n  }\n\n  handleKeyPress(evt) {\n    if (evt.key === 'Enter') {\n      // If button is disabled\n      if (this.props.status === 'connected' && this.props.url === this.state.url)\n        return\n      this.props.onChange(this.state.url)\n    }\n  }\n\n  render() {\n    const { status, onChange } = this.props\n    const { url } = this.state\n    let status_color = {\n      connected: 'success',\n      connecting: 'warning',\n      disconnected: 'danger',\n    }[status]\n\n    return (\n      <div className={\"Navigation \" + status} >\n        <h1>Validator UAT</h1>\n        <Navbar dark expand=\"md\">\n          <NavbarBrand>Validator</NavbarBrand>\n          <InputGroup>\n            <InputGroupAddon addonType=\"prepend\">\n              <Badge color={ status_color }>{' '}</Badge>\n            </InputGroupAddon>\n            <Input value={ url } onChange={ this.handleChange } onKeyPress={ this.handleKeyPress }/>\n            <InputGroupAddon addonType=\"append\">\n              <Button\n                onClick={() => onChange(url)}\n                disabled={status === 'connected' && this.props.url === this.state.url}>\n                { status === 'connected' ? this.props.url !== this.state.url ? 'Change' : 'Connected' : 'Connect' }\n              </Button>\n            </InputGroupAddon>\n          </InputGroup>\n        </Navbar>\n      </div>\n    )\n  }\n}\n\nexport default Navigation\n","import Octicon, {ChevronLeft, ChevronRight} from '@githubprimer/octicons-react'\nimport React, { Component } from 'react'\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Table,\n} from 'reactstrap'\n\nimport './LogDetailsModal.css'\n\nfunction formatLogDetails(details) {\n  switch (details.dataType) {\n  case 'core.RequestEvent':\n    console.log(details)\n    const { block, transactions } = details.data.Proposal\n    return (<>\n      <h3>Proposal: block</h3>\n      <Table striped size=\"sm\">\n        <tbody>\n        {\n          Object.entries(block).map(([key, val], id) => (\n            <tr key={id}>\n              <th>{ key }</th>\n              <td>{ val }</td>\n            </tr>\n          ))\n        }\n        </tbody>\n      </Table>\n      <h4>Transactions</h4>\n      <Table striped size=\"sm\">\n        <thead>\n          <tr>\n            <th>From</th>\n            <th>To</th>\n            <th>Amount</th>\n          </tr>\n        </thead>\n        <tbody>\n        {\n          transactions.map((tx, id) => (\n            <tr key={id}>\n              <td>{ tx.from.substr(10) }</td>\n              <td>{ tx.to.substr(10) }</td>\n              <td>{ tx.amount }</td>\n            </tr>\n          ))\n        }\n        </tbody>\n      </Table>\n    </>)\n  default:\n    return (<pre>{ JSON.stringify(details, null, 2) }</pre>)\n  }\n}\n\nclass LogDetailsModal extends Component {\n  render() {\n    const { isOpen, toggle, details } = this.props\n\n    const body = details ? formatLogDetails(details) : null\n\n    return (\n      <div>\n        <Modal isOpen={ isOpen } toggle={ toggle } size='lg'>\n        { details ? (<>\n            <ModalHeader toggle={ toggle }>\n            {\n              details.type === \"ibftEventIn\"\n                ? <Octicon icon={ChevronLeft} />\n                : <Octicon icon={ChevronRight} />\n            }\n            { details.dataType || details.type }\n            </ModalHeader>\n            <ModalBody>\n            { body }\n            </ModalBody>\n          </>\n          ) : ''\n        }\n        </Modal>\n      </div>\n    )\n  }\n}\n\nexport default LogDetailsModal\n","import React, { Component } from 'react'\nimport {\n  ListGroup,\n  ListGroupItem,\n  Button,\n} from 'reactstrap'\nimport Octicon, {ChevronLeft, ChevronRight, Clippy, Alert} from '@githubprimer/octicons-react'\nimport LogDetailsModal from './LogDetailsModal'\n\nimport './LiveLogs.css'\n\nfunction stylizeItem(type) {\n  switch (type) {\n  case 'ibftEventIn':\n    return {\n      color: 'primary',\n      icon: ChevronRight,\n    }\n  case 'ibftEventOut':\n    return {\n      color: 'info',\n      icon: ChevronLeft,\n    }\n  case 'txEvent':\n    return {\n      color: 'success',\n      icon: Clippy,\n    }\n  default:\n    return {\n      color: 'dark',\n      icon: Alert,\n    }\n  }\n}\n\nclass LiveLogs extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      detailsModalOpen: false,\n      details: null,\n    }\n\n    this.openDetailsModal = this.openDetailsModal.bind(this)\n    this.closeDetailsModal = this.closeDetailsModal.bind(this)\n  }\n\n  openDetailsModal(details) {\n    return () => {\n      this.setState({\n        detailsModalOpen: true,\n        details: details,\n      })\n    }\n  }\n\n  closeDetailsModal() {\n    this.setState({\n      detailsModalOpen: false,\n    })\n  }\n\n  render() {\n\n    const logs = this.props.logs\n      .map((log, id) => (\n        <ListGroupItem key={ id } color={ stylizeItem(log.type).color }>\n          <Button color=\"link\" onClick={ this.openDetailsModal(log) }>\n            <Octicon icon={ stylizeItem(log.type).icon } />\n            { (() => {\n              switch (log.dataType) {\n                case 'core.RequestEvent':\n                  return 'Proposal: block'\n                default:\n                  return log.dataType || log.type\n                }\n              })()\n            }\n          </Button>\n        </ListGroupItem>\n      ))\n    const { details, detailsModalOpen } = this.state\n    return (\n      <div className=\"LiveLogs h-100\">\n        <LogDetailsModal\n          isOpen={ detailsModalOpen }\n          toggle={ this.closeDetailsModal }\n          details={ details }\n        />\n        <ListGroup>\n        { logs }\n        </ListGroup>\n      </div>\n    )\n  }\n}\n\nexport default LiveLogs\n\n","import React, { Component } from 'react'\nimport {\n} from 'reactstrap'\nimport Graph from 'react-graph-vis'\n\nclass NetworkTopo extends Component {\n\n  options = {\n    layout: {\n      improvedLayout: true\n    },\n    edges: {\n      shadow: true,\n      smooth: true,\n    },\n    nodes: {\n      shape: 'hexagon',\n      shadow: true,\n      size: 20,\n      font: {\n        color: 'white',\n      },\n    },\n    autoResize: true,\n  }\n\n  events = {\n    select: event => {\n      const { nodes/*, edges */ } = event;\n      this.props.onNodeSelect(nodes[0])\n    }\n  }\n\n  render() {\n    const { graph } = this.props\n\n    return (\n      <div className=\"NetworkTopo h-100\">\n        <Graph graph={graph} options={this.options} events={this.events} style={{ height: '100%', width: '100%'}}/>\n      </div>\n    )\n  }\n}\n\nexport default NetworkTopo\n","import React, { Component } from 'react'\nimport {\n  Card,\n  CardTitle,\n  CardText,\n} from 'reactstrap'\n\nclass NetworkDetails extends Component {\n  render() {\n    const { node } = this.props\n    return (\n      <div className=\"NetworkDetails h-100\">\n        <Card body color='dark'>\n          <CardTitle>{ node ? node.label : 'select a node' }</CardTitle>\n          <ul>\n          { node ?\n            Object.entries(node).map(([key, val], id) => (\n              <li key={id}>\n                <strong>{ key }: </strong>\n                { val }\n              </li>\n            ))\n            : ''\n          }\n          </ul>\n        </Card>\n      </div>\n    )\n  }\n}\n\nexport default NetworkDetails\n\n","import React, { Component } from 'react'\nimport {\n  Row,\n  Col,\n  Container,\n} from 'reactstrap'\nimport LiveLogs from './LiveLogs'\nimport NetworkTopo from './NetworkTopo'\nimport NetworkDetails from './NetworkDetails'\n\nimport './MainPage.css'\n\nclass MainPage extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      logs: [],\n      status: 'disconnected',\n      failed: false,\n      nodes: [],\n      edges: [],\n      ws: null,\n      tries: 0,\n      selectedNetworkNode: null,\n    }\n\n    this.connect = this.connect.bind(this)\n    this.connectionStatusChanged = this.connectionStatusChanged.bind(this)\n    this.updateNetworkTopo = this.updateNetworkTopo.bind(this)\n    this.onNodeSelect = this.onNodeSelect.bind(this)\n  }\n\n  componentDidMount() {\n    this.connect(this.props.url)\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.url !== prevProps.url) {\n      this.setState({\n        tries: 0\n      }, () => this.connect(this.props.url))\n    } else if (this.state.status === 'disconnected' && this.state.tries < 3) {\n      this.connect(this.props.url)\n    }\n  }\n\n  connectionStatusChanged(status) {\n    this.setState({\n      status: status\n    })\n    this.props.onStateChange(status)\n  }\n\n  connect(url) {\n    this.setState({\n      tries: this.state.tries + 1\n    })\n    if (this.state.ws && this.state.status !== 'disconnected') {\n      this.state.ws.onclose = null\n      this.state.ws.close()\n    }\n    this.connectionStatusChanged('connecting')\n    const ws = new WebSocket('ws://' + url)\n\n    ws.onmessage = e => {\n      const msg = JSON.parse(e.data)\n      switch (msg.type) {\n      case 'network-state':\n        const nodes = Object.entries(msg.data)\n          .map(([address, networkAddress], id) => {\n          const label = networkAddress.split(':')[0] || 'THIS'\n          let node = {\n            id: id,\n            label: label,\n            address: address,\n            networkAddress: networkAddress,\n          }\n          if (networkAddress === ':8080') {\n            node.color = 'green'\n            node.fixed = true\n          }\n          return node\n        })\n        const edges = nodes\n          .filter(node => node.id !== 1)\n          .map(node => ({ to: 1, from: node.id }))\n\n        this.setState({\n          edges: edges,\n          nodes: nodes,\n        })\n        break\n      default:\n        msg.date = Date.now()\n        const logs = [...this.state.logs, msg].sort((a, b) => (b.date - a.date)).slice(0, 20)\n        this.setState({\n          logs: logs\n        })\n      }\n    }\n\n    ws.onopen = e => {\n      this.connectionStatusChanged('connected')\n      this.setState({\n        logs: [],\n        failed: false,\n      })\n      this.updateNetworkTopo()\n    }\n\n    ws.onerror = e => {\n      this.connectionStatusChanged('disconnected')\n      this.state.ws.close()\n    }\n    ws.onclose = e => {\n      this.connectionStatusChanged('disconnected')\n    }\n    this.setState({ws})\n  }\n\n  updateNetworkTopo() {\n    this.state.ws.send(JSON.stringify({\n      type: 'network-state'\n    }))\n  }\n\n  onNodeSelect(nodeId) {\n    this.setState({\n      selectedNetworkNode: this.state.nodes[nodeId]\n    })\n  }\n\n  render() {\n    const { logs, status, nodes, edges, selectedNetworkNode } = this.state\n    return (\n      <Container fluid className={\"MainPage \" + status}>\n        <Row className=\"h-100\">\n          <Col md='2' className=\"h-100\">\n            <LiveLogs logs={ logs }/>\n            <h2>Live logs</h2>\n          </Col>\n          <Col md='6' className=\"h-100\">\n            <NetworkTopo graph={{ nodes,  edges }} onNodeSelect={ this.onNodeSelect } />\n            <h2>Network topology</h2>\n          </Col>\n          <Col md='4' className=\"h-100\">\n            <NetworkDetails node={ selectedNetworkNode } />\n            <h2>Node details</h2>\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n}\n\nexport default MainPage\n","import React, { Component } from 'react'\nimport Navigation from './Navigation'\nimport MainPage from './MainPage'\nimport './Dashboard.css'\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      node_url: 'a263d53aae7c911e8a7a9069f40f5f2f-415446416.ap-southeast-1.elb.amazonaws.com:3000/ws',\n      //node_url: '127.0.0.1:3001/ws',\n      conn_status: 'disconnected',\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleStateChange = this.handleStateChange.bind(this)\n  }\n\n  handleChange(url) {\n    this.setState({\n      node_url: url\n    })\n  }\n\n  handleStateChange(state) {\n    this.setState({ ...this.state,\n      conn_status: state\n    })\n  }\n\n  render() {\n    const { node_url, conn_status } = this.state\n\n    return (\n      <div className=\"Dashboard\">\n        <Navigation url={ node_url } status={ conn_status } onChange={ this.handleChange } />\n        <MainPage url={ node_url } onStateChange={ this.handleStateChange } />\n      </div>\n    )\n  }\n}\n\nexport default Dashboard\n\n","import React, { Component } from 'react'\nimport './App.css'\nimport Dashboard from './Dashboard'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Dashboard />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}