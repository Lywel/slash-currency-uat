{"version":3,"sources":["components/LogDetailsModal.js","components/Navigation.js","components/LiveLogs.js","components/NetworkTopo.js","components/NetworkDetails.js","components/MainPage.js","components/Dashboard.js","components/App.js","serviceWorker.js","index.js"],"names":["LogDetailsModal","_this$props","this","props","isOpen","toggle","details","body","dataType","_details$data$Proposa","data","Proposal","block","transactions","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","Fragment","reactstrap__WEBPACK_IMPORTED_MODULE_8__","striped","size","Object","entries","map","_ref","id","_ref2","_mnt_sd_home_maxime_workspace_pro_slash_lab_currency_uat_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__","key","val","tx","Buffer","from","toString","substring","to","amount","console","log","_ref3","_ref4","JSON","stringify","formatLogDetails","type","_githubprimer_octicons_react__WEBPACK_IMPORTED_MODULE_6__","icon","ChevronLeft","ChevronRight","Component","Navigation","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","url","handleChange","bind","assertThisInitialized","handleKeyPress","evt","setState","objectSpread","target","value","status","onChange","status_color","connected","connecting","disconnected","react_default","className","reactstrap_es","dark","expand","addonType","color","onKeyPress","onClick","disabled","stylizeItem","Clippy","Alert","LiveLogs","detailsModalOpen","openDetailsModal","closeDetailsModal","_this2","_this3","logs","index_esm","_this$state","NetworkTopo","options","layout","improvedLayout","edges","shadow","smooth","nodes","shape","font","autoResize","events","select","event","onNodeSelect","graph","lib_default","style","height","width","NetworkDetails","node","slicedToArray","MainPage","failed","ws","tries","selectedNetworkNode","updateTopoInter","connect","connectionStatusChanged","updateNetworkTopo","setInterval","prevProps","onStateChange","onopen","onclose","close","WebSocket","onmessage","e","msg","parse","address","networkAddress","label","split","fixed","filter","date","Date","now","toConsumableArray","concat","sort","b","slice","onerror","send","nodeId","fluid","md","src_components_LiveLogs","components_NetworkTopo","components_NetworkDetails","Dashboard","node_url","conn_status","handleStateChange","src_components_Navigation","src_components_MainPage","App","src_components_Dashboard","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.550e79c6.chunk.js","sourcesContent":["import Octicon, {ChevronLeft, ChevronRight} from '@githubprimer/octicons-react'\nimport React, { Component } from 'react'\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Table,\n} from 'reactstrap'\n\nimport './LogDetailsModal.css'\n\nfunction formatLogDetails(details) {\n  switch (details.dataType) {\n  case 'core.RequestEvent':\n    // Display block details\n    const { block, transactions } = details.data.Proposal\n    return (<>\n      <h3>Proposal: block</h3>\n      <Table striped size=\"sm\">\n        <tbody>\n        {\n          Object.entries(block).map(([key, val], id) => (\n            <tr key={id}>\n              <th>{ key }</th>\n              <td>{ val }</td>\n            </tr>\n          ))\n        }\n        </tbody>\n      </Table>\n      <h4>Transactions</h4>\n      <Table striped size=\"sm\">\n        <thead>\n          <tr>\n            <th>From</th>\n            <th>To</th>\n            <th>Amount</th>\n          </tr>\n        </thead>\n        <tbody>\n        {\n          transactions.map((tx, id) => (\n            <tr key={id}>\n              <td>{ Buffer.from(tx.from).toString('hex').substring(0, 16) }</td>\n              <td>{ Buffer.from(tx.to).toString('hex').substring(0, 16) }</td>\n              <td>{ tx.amount }</td>\n            </tr>\n          ))\n        }\n        </tbody>\n      </Table>\n    </>)\n  case 'types.Transaction':\n  console.log(details)\n    // Display transaction details\n    return (<>\n      <h3>Transaction</h3>\n      <Table striped size=\"sm\">\n        <tbody>\n        {\n          Object.entries(details.data).map(([key, val], id) => (\n            <tr key={id}>\n              <th>{ key }</th>\n              <td>{ key === 'from' || key === 'to' ? Buffer.from(val).toString('hex') : val }</td>\n            </tr>\n          ))\n        }\n        </tbody>\n      </Table>\n    </>)\n  default:\n    return (<pre>{ JSON.stringify(details, null, 2) }</pre>)\n  }\n}\n\nclass LogDetailsModal extends Component {\n  render() {\n    const { isOpen, toggle, details } = this.props\n\n    const body = details ? formatLogDetails(details) : null\n\n    return (\n      <div>\n        <Modal isOpen={ isOpen } toggle={ toggle } size='lg'>\n        { details ? (<>\n            <ModalHeader toggle={ toggle }>\n            {\n              details.type === \"ibftEventIn\"\n                ? <Octicon icon={ChevronLeft} />\n                : <Octicon icon={ChevronRight} />\n            }\n            { details.dataType || details.type }\n            </ModalHeader>\n            <ModalBody>\n            { body }\n            </ModalBody>\n          </>\n          ) : ''\n        }\n        </Modal>\n      </div>\n    )\n  }\n}\n\nexport default LogDetailsModal\n","import React, { Component } from 'react'\nimport {\n  Navbar,\n  NavbarBrand,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n  Badge,\n  Button,\n} from 'reactstrap'\nimport './Navigation.css'\n\nclass Navigation extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      url: this.props.url\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleKeyPress = this.handleKeyPress.bind(this)\n  }\n\n  handleChange(evt) {\n    this.setState({...this.state, url: evt.target.value})\n  }\n\n  handleKeyPress(evt) {\n    if (evt.key === 'Enter') {\n      // If button is disabled\n      if (this.props.status === 'connected' && this.props.url === this.state.url)\n        return\n      this.props.onChange(this.state.url)\n    }\n  }\n\n  render() {\n    const { status, onChange } = this.props\n    const { url } = this.state\n    let status_color = {\n      connected: 'success',\n      connecting: 'warning',\n      disconnected: 'danger',\n    }[status]\n\n    return (\n      <div className={\"Navigation \" + status} >\n        <h1>Validator UAT</h1>\n        <Navbar dark expand=\"md\">\n          <NavbarBrand>Validator</NavbarBrand>\n          <InputGroup>\n            <InputGroupAddon addonType=\"prepend\">\n              <Badge color={ status_color }>{' '}</Badge>\n            </InputGroupAddon>\n            <Input value={ url } onChange={ this.handleChange } onKeyPress={ this.handleKeyPress }/>\n            <InputGroupAddon addonType=\"append\">\n              <Button\n                onClick={() => onChange(url)}\n                disabled={status === 'connected' && this.props.url === this.state.url}>\n                { status === 'connected' ? this.props.url !== this.state.url ? 'Change' : 'Connected' : 'Connect' }\n              </Button>\n            </InputGroupAddon>\n          </InputGroup>\n        </Navbar>\n      </div>\n    )\n  }\n}\n\nexport default Navigation\n","import React, { Component } from 'react'\nimport {\n  ListGroup,\n  ListGroupItem,\n  Button,\n} from 'reactstrap'\nimport Octicon, {ChevronLeft, ChevronRight, Clippy, Alert} from '@githubprimer/octicons-react'\nimport LogDetailsModal from './LogDetailsModal'\n\nimport './LiveLogs.css'\n\nfunction stylizeItem(type) {\n  switch (type) {\n  case 'ibftEventIn':\n    return {\n      color: 'primary',\n      icon: ChevronRight,\n    }\n  case 'ibftEventOut':\n    return {\n      color: 'info',\n      icon: ChevronLeft,\n    }\n  case 'txEvent':\n    return {\n      color: 'success',\n      icon: Clippy,\n    }\n  default:\n    return {\n      color: 'dark',\n      icon: Alert,\n    }\n  }\n}\n\nclass LiveLogs extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      detailsModalOpen: false,\n      details: null,\n    }\n\n    this.openDetailsModal = this.openDetailsModal.bind(this)\n    this.closeDetailsModal = this.closeDetailsModal.bind(this)\n  }\n\n  openDetailsModal(details) {\n    return () => {\n      this.setState({\n        detailsModalOpen: true,\n        details: details,\n      })\n    }\n  }\n\n  closeDetailsModal() {\n    this.setState({\n      detailsModalOpen: false,\n    })\n  }\n\n  render() {\n\n    const logs = this.props.logs\n      .map((log, id) => (\n        <ListGroupItem key={ id } color={ stylizeItem(log.type).color }>\n          <Button color=\"link\" onClick={ this.openDetailsModal(log) }>\n            <Octicon icon={ stylizeItem(log.type).icon } />\n            { (() => {\n              switch (log.dataType) {\n                case 'core.RequestEvent':\n                  return 'Proposal: block'\n                default:\n                  return log.dataType || log.type\n                }\n              })()\n            }\n          </Button>\n        </ListGroupItem>\n      ))\n    const { details, detailsModalOpen } = this.state\n    return (\n      <div className=\"LiveLogs h-100\">\n        <LogDetailsModal\n          isOpen={ detailsModalOpen }\n          toggle={ this.closeDetailsModal }\n          details={ details }\n        />\n        <ListGroup>\n        { logs }\n        </ListGroup>\n      </div>\n    )\n  }\n}\n\nexport default LiveLogs\n\n","import React, { Component } from 'react'\nimport {\n} from 'reactstrap'\nimport Graph from 'react-graph-vis'\n\nclass NetworkTopo extends Component {\n\n  options = {\n    layout: {\n      improvedLayout: true\n    },\n    edges: {\n      shadow: true,\n      smooth: true,\n    },\n    nodes: {\n      shape: 'hexagon',\n      shadow: true,\n      size: 20,\n      font: {\n        color: 'white',\n      },\n    },\n    autoResize: true,\n  }\n\n  events = {\n    select: event => {\n      const { nodes/*, edges */ } = event;\n      this.props.onNodeSelect(nodes[0])\n    }\n  }\n\n  render() {\n    const { graph } = this.props\n\n    return (\n      <div className=\"NetworkTopo\">\n        <Graph graph={graph} options={this.options} events={this.events} style={{ height: '100%', width: '100%'}}/>\n      </div>\n    )\n  }\n}\n\nexport default NetworkTopo\n","import React, { Component } from 'react'\nimport {\n  Card,\n  CardTitle,\n  CardText,\n} from 'reactstrap'\n\nclass NetworkDetails extends Component {\n  render() {\n    const { node } = this.props\n    return (\n      <div className=\"NetworkDetails\">\n        <Card body color='dark'>\n          <CardTitle>Validator details</CardTitle>\n          <ul>\n          { node ?\n            Object.entries(node).map(([key, val], id) => (\n              <li key={id}>\n                <strong>{ key }: </strong>\n                { val }\n              </li>\n            ))\n            : 'Please select a node'\n          }\n          </ul>\n        </Card>\n      </div>\n    )\n  }\n}\n\nexport default NetworkDetails\n\n","import React, { Component } from 'react'\nimport {\n  Row,\n  Col,\n  Container,\n} from 'reactstrap'\nimport LiveLogs from './LiveLogs'\nimport NetworkTopo from './NetworkTopo'\nimport NetworkDetails from './NetworkDetails'\n\nimport './MainPage.css'\n\nclass MainPage extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      logs: [],\n      status: 'disconnected',\n      failed: false,\n      nodes: [],\n      edges: [],\n      ws: null,\n      tries: 0,\n      selectedNetworkNode: null,\n      updateTopoInter: null,\n    }\n\n    this.connect = this.connect.bind(this)\n    this.connectionStatusChanged = this.connectionStatusChanged.bind(this)\n    this.updateNetworkTopo = this.updateNetworkTopo.bind(this)\n    this.onNodeSelect = this.onNodeSelect.bind(this)\n  }\n\n  componentDidMount() {\n    this.connect(this.props.url)\n    this.setState({\n      updateTopoInter: setInterval(this.updateNetworkTopo, 500),\n    })\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.url !== prevProps.url) {\n      this.setState({\n        tries: 0\n      }, () => this.connect(this.props.url))\n    } else if (this.state.status === 'disconnected' && this.state.tries < 3) {\n      this.connect(this.props.url)\n    }\n  }\n\n  connectionStatusChanged(status) {\n    this.setState({\n      status: status\n    })\n    this.props.onStateChange(status)\n  }\n\n  connect(url) {\n    console.log('connect url:\"' + url + '\" ' + this.state.tries)\n    this.setState({\n      tries: this.state.tries + 1\n    })\n    if (this.state.ws && this.state.status !== 'disconnected') {\n      this.state.ws.onopen = null\n      this.state.ws.onclose = null\n      this.state.ws.close()\n    }\n    this.connectionStatusChanged('connecting')\n    const ws = new WebSocket('ws://' + url)\n\n    ws.onmessage = e => {\n      const msg = JSON.parse(e.data)\n      switch (msg.type) {\n      case 'network-state':\n        const nodes = Object.entries(msg.data)\n          .map(([address, networkAddress], id) => {\n          const label = networkAddress.split(':')[0] || 'THIS'\n          let node = {\n            id: id,\n            label: label,\n            address: address,\n            networkAddress: networkAddress,\n          }\n          if (networkAddress === ':8080') {\n            node.color = 'green'\n            node.fixed = true\n          }\n          return node\n        })\n        const edges = nodes\n          .filter(node => node.id !== 1)\n          .map(node => ({ to: 1, from: node.id }))\n\n        this.setState({\n          edges: edges,\n          nodes: nodes,\n        })\n        break\n      default:\n        msg.date = Date.now()\n        const logs = [...this.state.logs, msg].sort((a, b) => (b.date - a.date)).slice(0, 20)\n        this.setState({\n          logs: logs\n        })\n      }\n    }\n\n    ws.onopen = e => {\n      if (ws.url !== 'ws://' + this.props.url) {\n        return ws.close()\n      }\n      this.connectionStatusChanged('connected')\n      this.setState({\n        logs: [],\n        failed: false,\n      })\n      this.updateNetworkTopo()\n    }\n\n    ws.onerror = e => {\n      if (ws.url !== 'ws://' + this.props.url)\n        return ws.close()\n      this.connectionStatusChanged('disconnected')\n      this.state.ws.close()\n    }\n    ws.onclose = e => {\n      if (ws.url !== 'ws://' + this.props.url)\n        return\n      this.connectionStatusChanged('disconnected')\n    }\n    this.setState({ws})\n  }\n\n  updateNetworkTopo() {\n    if (this.state.status === 'connected' && this.state.ws.url === 'ws://' + this.props.url) {\n      this.state.ws.send(JSON.stringify({\n        type: 'network-state'\n      }))\n    }\n  }\n\n  onNodeSelect(nodeId) {\n    this.setState({\n      selectedNetworkNode: this.state.nodes[nodeId]\n    })\n  }\n\n  render() {\n    const { logs, status, nodes, edges, selectedNetworkNode } = this.state\n    return (\n      <Container fluid className={\"MainPage \" + status}>\n        <Row className=\"h-100\">\n          <Col md='2' className=\"h-100\">\n            <LiveLogs logs={ logs }/>\n            <h2>Live logs</h2>\n          </Col>\n          <Col md='6' className=\"h-100\">\n            <NetworkTopo graph={{ nodes,  edges }} onNodeSelect={ this.onNodeSelect } />\n            <NetworkDetails node={ selectedNetworkNode } />\n            <h2>Network topology</h2>\n          </Col>\n          <Col md='4' className=\"h-100\">\n            <h2>Blockchain</h2>\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n}\n\nexport default MainPage\n","import React, { Component } from 'react'\nimport Navigation from './Navigation'\nimport MainPage from './MainPage'\nimport './Dashboard.css'\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      node_url: 'a263d53aae7c911e8a7a9069f40f5f2f-415446416.ap-southeast-1.elb.amazonaws.com:3000/ws',\n      //node_url: '127.0.0.1:3001/ws',\n      conn_status: 'disconnected',\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleStateChange = this.handleStateChange.bind(this)\n  }\n\n  handleChange(url) {\n    this.setState({\n      node_url: url\n    })\n  }\n\n  handleStateChange(state) {\n    this.setState({ ...this.state,\n      conn_status: state\n    })\n  }\n\n  render() {\n    const { node_url, conn_status } = this.state\n\n    return (\n      <div className=\"Dashboard\">\n        <Navigation url={ node_url } status={ conn_status } onChange={ this.handleChange } />\n        <MainPage url={ node_url } onStateChange={ this.handleStateChange } />\n      </div>\n    )\n  }\n}\n\nexport default Dashboard\n\n","import React, { Component } from 'react'\nimport './App.css'\nimport Dashboard from './Dashboard'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Dashboard />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}